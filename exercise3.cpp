/******************************************************************************
 * This demo draws a triangle by defining its vertices in 3 dimensions
 * (the 3rd dimension is currently ignored and is just set to 0).
 *
 * The drawing is accomplished by:
 * - Uploading the vertices to the GPU using a Vertex Buffer Object (VBO).
 * - Specifying the vertices' format using a Vertex Array Object (VAO).
 * - Using a GLSL shader program (consisting of a simple vertex shader and a
 *   simple fragment shader) to actually draw the vertices as a triangle.
 *
 * Happy hacking! - eric
 *****************************************************************************/

#include <iostream>
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/gtc/type_ptr.hpp>
#include <gdev.h>
#include <vector>

// change this to your desired window attributes
#define WINDOW_WIDTH  1600
#define WINDOW_HEIGHT 900
#define WINDOW_TITLE  "Hello Frieren"
GLFWwindow *pWindow;

GLuint woodTexture;
GLuint goldTexture;

glm::vec3 cameraPos = glm::vec3(0.0f, 0.0f, 2.0f);
glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);

float yaw = -90.0f;
float pitch = 0.0f;
float fov = 90.0f;

float lastX = WINDOW_WIDTH/2.0f;
float lastY = WINDOW_HEIGHT/2.0f;
bool firstMouse = true;

glm::vec3 staff_center = glm::vec3(0.0f, -0.8f, 0.0f);

#define red_color 0.58f, 0.02f, 0.02f
#define gold_color 1.0f, 0.84f, 0.0f
#define shaft_width 0.035f
#define top_width 0.05f
#define diag 0.0707106f
#define small_side 0.0243825f
#define short_delta 0.0715839f
#define big_delta 0.1060660f
#define half_side ((3.0f * top_width) / 2.0f)
#define edge_side (top_width-small_side)
#define top_side (half_side*2.0f - small_side*2.0f)
#define bottom_side (half_side*2.0f)

// Deltas for the relevant sides in the diagonals
#define small_side_delta (big_delta * (small_side/bottom_side))
#define edge_side_delta (big_delta * (edge_side/bottom_side))
#define width_delta (big_delta * (top_width/bottom_side))

#define test_edge (short_delta * (edge_side/top_side))
#define front_z top_width/2.0f
#define back_z -top_width/2.0f
#define small_edge_x_delta (small_side * small_edge_side_ratio)
#define main_side_len (2.0f*small_side+2.0f*edge_side+top_width)
#define ratio


float vertices[] = {
    -0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.075000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.075000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.075000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.075000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.075000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.075000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.497241f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.497241f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.068732f, 0.548114f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.068732f, 0.548114f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.497241f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.515355f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.068732f, 0.548114f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.515355f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.104087f, 0.583470f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.104087f, 0.583470f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.515355f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.550711f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.104087f, 0.583470f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.550711f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.601584f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.601584f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.550711f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.568825f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.601584f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.568825f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.586066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.497241f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.068732f, 0.548114f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.497241f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.068732f, 0.548114f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.515355f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.497241f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.068732f, 0.548114f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.104087f, 0.583470f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.515355f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.104087f, 0.583470f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.550711f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.515355f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.104087f, 0.583470f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.601584f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.550711f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.601584f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.568825f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.550711f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.601584f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.586066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.568825f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.068732f, 0.548114f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.068732f, 0.548114f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.068732f, 0.548114f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.068732f, 0.548114f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.104087f, 0.583470f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.068732f, 0.548114f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.104087f, 0.583470f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.104087f, 0.583470f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.068732f, 0.548114f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.104087f, 0.583470f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.601584f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.104087f, 0.583470f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.601584f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.601584f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.104087f, 0.583470f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.075000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.497241f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.092241f, 0.497241f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.497241f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.092241f, 0.497241f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.497241f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.515355f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.110355f, 0.515355f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.497241f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.515355f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.110355f, 0.515355f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.515355f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.550711f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.145711f, 0.550711f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.515355f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.550711f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.145711f, 0.550711f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.550711f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.568825f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.163825f, 0.568825f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.550711f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.568825f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.163825f, 0.568825f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.568825f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.586066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.181066f, 0.586066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.568825f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.586066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.601584f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.586066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.610449f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.601584f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.610449f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.627201f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.627201f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.610449f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.636066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.627201f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.636066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.677201f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.677201f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.636066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.686066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.677201f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.686066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.702819f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.702819f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.686066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.711683f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.702819f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.711683f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.736066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.601584f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.610449f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.586066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.601584f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.627201f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.610449f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.627201f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.636066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.610449f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.627201f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.677201f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.636066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.677201f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.686066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.636066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.677201f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.702819f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.686066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.702819f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.711683f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.686066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.702819f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.736066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.711683f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.601584f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.627201f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.601584f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.627201f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.627201f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.601584f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.627201f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.677201f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.627201f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.677201f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.677201f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.627201f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.677201f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.702819f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.677201f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.702819f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.702819f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.677201f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.181066f, 0.586066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.586066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.610449f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.181066f, 0.610449f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.586066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.610449f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.181066f, 0.610449f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.610449f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.636066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.181066f, 0.636066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.610449f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.636066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.181066f, 0.636066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.636066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.686066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.181066f, 0.686066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.636066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.686066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.181066f, 0.686066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.686066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.711683f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.181066f, 0.711683f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.686066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.711683f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.181066f, 0.711683f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.711683f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.736066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.181066f, 0.736066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.711683f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.736066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.702819f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.736066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.753307f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.702819f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.753307f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.104087f, 0.720933f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.104087f, 0.720933f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.753307f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.771421f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.104087f, 0.720933f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.771421f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.068731f, 0.756289f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.068731f, 0.756289f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.771421f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.806777f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.068731f, 0.756289f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.806777f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050617f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050617f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.806777f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.824891f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050617f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.824891f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.702819f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.753307f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.736066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.702819f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.104087f, 0.720933f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.753307f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.104087f, 0.720933f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.771421f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.753307f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.104087f, 0.720933f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.068731f, 0.756289f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.771421f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.068731f, 0.756289f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.806777f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.771421f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.068731f, 0.756289f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050617f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.806777f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050617f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.824891f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.806777f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050617f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.824891f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.122201f, 0.702819f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.104087f, 0.720933f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.702819f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.104087f, 0.720933f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.104087f, 0.720933f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.122201f, 0.702819f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.104087f, 0.720933f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.068731f, 0.756289f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.104087f, 0.720933f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.068731f, 0.756289f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.068731f, 0.756289f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.104087f, 0.720933f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.068731f, 0.756289f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050617f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.068731f, 0.756289f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050617f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050617f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.068731f, 0.756289f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.181066f, 0.736066f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.736066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.753307f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.163825f, 0.753307f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.181066f, 0.736066f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.753307f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.163825f, 0.753307f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.753307f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.771421f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.145711f, 0.771421f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.163825f, 0.753307f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.771421f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.145711f, 0.771421f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.771421f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.806777f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.110355f, 0.806777f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.145711f, 0.771421f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.806777f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.110355f, 0.806777f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.806777f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.824891f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.092241f, 0.824891f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.110355f, 0.806777f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.824891f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.092241f, 0.824891f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.824891f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.075000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.092241f, 0.824891f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050617f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050617f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.075000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050617f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050617f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.075000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050617f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050617f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050617f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.075000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.075000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.050618f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.050618f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    0.025000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    0.025000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.025000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.025000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.075000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.075000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.075000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.075000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.824891f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.075000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.824891f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.824891f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.754592f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.754592f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.117962f, 0.737763f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.754592f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.824891f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.117962f, 0.737763f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.754592f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.774403f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.117962f, 0.737763f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.117962f, 0.737763f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.774403f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.117962f, 0.737763f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.075000f, 0.842132f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.075000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.824891f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.092241f, 0.824891f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.075000f, 0.842132f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.824891f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.092241f, 0.824891f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.824891f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.754592f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.131836f, 0.754592f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.824891f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.754592f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.117962f, 0.737763f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.754592f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.117962f, 0.737763f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.117962f, 0.737763f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.754592f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.754592f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.075000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.497241f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.075000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.497241f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.561630f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.497241f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.117962f, 0.572550f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.561630f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 

    // start of test
    
    -0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.497241f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.561630f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.561630f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.117962f, 0.572550f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.050618f, 0.530000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.117962f, 0.572550f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.117962f, 0.572550f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.117962f, 0.572550f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.050618f, 0.530000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.075000f, 0.480000f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.497241f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.075000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 

    // End of test
    
    -0.092241f, 0.497241f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.497241f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.075000f, 0.480000f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.092241f, 0.497241f, 0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.561630f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.497241f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.131836f, 0.561630f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.561630f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.092241f, 0.497241f, -0.025000f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.117962f, 0.572550f, 0.016667f, 1.000000f, 0.840000f, 0.000000f,
    -0.117962f, 0.572550f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.561630f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    
    -0.117962f, 0.572550f, -0.016667f, 1.000000f, 0.840000f, 0.000000f, 
    -0.131836f, 0.561630f, -0.016667f, 1.000000f, 0.840000f, 0.000000f,
    -0.131836f, 0.561630f, 0.016667f, 1.000000f, 0.840000f, 0.000000f, 

        // top part thicc
    shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color,
    (shaft_width+0.015f)/2.0f, 0.48f, (shaft_width+0.015f)/2.0f, gold_color,
    -(shaft_width+0.015f)/2.0f, 0.48f, (shaft_width+0.015f)/2.0f, gold_color,

    -(shaft_width+0.015f)/2.0f, 0.48f, (shaft_width+0.015f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color,
    (shaft_width+0.015f)/2.0f, 0.48f, -(shaft_width+0.015f)/2.0f, gold_color,
    (shaft_width+0.015f)/2.0f, 0.48f, (shaft_width+0.015f)/2.0f, gold_color,

    shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.455f, -shaft_width/2.0f, gold_color,
    (shaft_width+0.015f)/2.0f, 0.48f, -(shaft_width+0.015f)/2.0f, gold_color,


    -(shaft_width+0.015f)/2.0f, 0.48f, -(shaft_width+0.015f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.455f, -shaft_width/2.0f, gold_color,
    -(shaft_width+0.015f)/2.0f, 0.48f, (shaft_width+0.015f)/2.0f, gold_color,

    -shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color,
    -(shaft_width+0.015f)/2.0f, 0.48f, (shaft_width+0.015f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.455f, -shaft_width/2.0f, gold_color,

    -(shaft_width+0.015f)/2.0f, 0.48f, -(shaft_width+0.015f)/2.0f, gold_color,
    (shaft_width+0.015f)/2.0f, 0.48f, -(shaft_width+0.015f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.455f, -shaft_width/2.0f, gold_color,

    shaft_width/2.0f, 0.455f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.455f, -shaft_width/2.0f, gold_color,
    (shaft_width+0.015f)/2.0f, 0.48f, -(shaft_width+0.015f)/2.0f, gold_color,


    // top part 4th shorter section
    (shaft_width+0.0109375f)/2.0f, 0.4475f, (shaft_width+0.0109375f)/2.0f, gold_color,
    (shaft_width+0.0109375f)/2.0f, 0.4525f, (shaft_width+0.0109375f)/2.0f, gold_color,
    -(shaft_width+0.0109375f)/2.0f, 0.4525f, (shaft_width+0.0109375f)/2.0f, gold_color,

    -(shaft_width+0.0109375f)/2.0f, 0.4525f, (shaft_width+0.0109375f)/2.0f, gold_color,
    -(shaft_width+0.0109375f)/2.0f, 0.4475f, (shaft_width+0.0109375f)/2.0f, gold_color,
    (shaft_width+0.0109375f)/2.0f, 0.4475f, (shaft_width+0.0109375f)/2.0f, gold_color,

    (shaft_width+0.0109375f)/2.0f, 0.4475f, (shaft_width+0.0109375f)/2.0f, gold_color,
    (shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    (shaft_width+0.0109375f)/2.0f, 0.4525f, (shaft_width+0.0109375f)/2.0f, gold_color,

    (shaft_width+0.0109375f)/2.0f, 0.4475f, (shaft_width+0.0109375f)/2.0f, gold_color,
    (shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    (shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color,

    // // End with whole top
    (shaft_width+0.0109375f)/2.0f, 0.4525f, (shaft_width+0.0109375f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color,
    -(shaft_width+0.0109375f)/2.0f, 0.4525f, (shaft_width+0.0109375f)/2.0f, gold_color,

    shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color,
    (shaft_width+0.0109375f)/2.0f, 0.4525f, (shaft_width+0.0109375f)/2.0f, gold_color,

    (shaft_width+0.0109375f)/2.0f, 0.4525f, (shaft_width+0.0109375f)/2.0f, gold_color,
    (shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color,

    (shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.455f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color,

    -(shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color, 
    -(shaft_width+0.0109375f)/2.0f, 0.4525f, (shaft_width+0.0109375f)/2.0f, gold_color, 
    -shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color, 
    

    -(shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color,  
    -shaft_width/2.0f, 0.455f, shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, 0.455f, -shaft_width/2.0f, gold_color, 

    -(shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color, 
    -shaft_width/2.0f, 0.455f, -shaft_width/2.0f, gold_color, 
    shaft_width/2.0f, 0.455f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color,  
    -(shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.455f, -shaft_width/2.0f, gold_color,  
    // //fin

    // End with whole bottom
    (shaft_width+0.0109375f)/2.0f, 0.4475f, (shaft_width+0.0109375f)/2.0f, gold_color,
    -(shaft_width+0.0109375f)/2.0f, 0.4475f, (shaft_width+0.0109375f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color,
    (shaft_width+0.0109375f)/2.0f, 0.4475f, (shaft_width+0.0109375f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color,

    (shaft_width+0.0109375f)/2.0f, 0.4475f, (shaft_width+0.0109375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color,
    (shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color,

    (shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.445f, -shaft_width/2.0f, gold_color,

    -(shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color, 
    -shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color, 
    -(shaft_width+0.0109375f)/2.0f, 0.4475f, (shaft_width+0.0109375f)/2.0f, gold_color, 
    

    -(shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color,  
    -shaft_width/2.0f, 0.445f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color, 

    -(shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color, 
    shaft_width/2.0f, 0.445f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, 0.445f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color,  
    shaft_width/2.0f, 0.445f, -shaft_width/2.0f, gold_color, 
    -(shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color, 
    //fin

    -(shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    -(shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    -(shaft_width+0.0109375f)/2.0f, 0.4525f, (shaft_width+0.0109375f)/2.0f, gold_color,

    -(shaft_width+0.0109375f)/2.0f, 0.4475f, (shaft_width+0.0109375f)/2.0f, gold_color,
    -(shaft_width+0.0109375f)/2.0f, 0.4525f, (shaft_width+0.0109375f)/2.0f, gold_color,
    -(shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color,

    -(shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    (shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    -(shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color,

    (shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    -(shaft_width+0.0109375f)/2.0f, 0.4475f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    (shaft_width+0.0109375f)/2.0f, 0.4525f, -(shaft_width+0.0109375f)/2.0f, gold_color,
    
    // top part 3rd shorter section
    (shaft_width+0.009375f)/2.0f, 0.4375f, (shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4425f, (shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4425f, (shaft_width+0.009375f)/2.0f, gold_color,

    -(shaft_width+0.009375f)/2.0f, 0.4425f, (shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4375f, (shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4375f, (shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4375f, (shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4425f, (shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4375f, (shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color,

    // // End with whole top
    (shaft_width+0.009375f)/2.0f, 0.4425f, (shaft_width+0.009375f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4425f, (shaft_width+0.009375f)/2.0f, gold_color,

    shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4425f, (shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4425f, (shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.445f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color,

    -(shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color, 
    -(shaft_width+0.009375f)/2.0f, 0.4425f, (shaft_width+0.009375f)/2.0f, gold_color, 
    -shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color, 
    

    -(shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color,  
    -shaft_width/2.0f, 0.445f, shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, 0.445f, -shaft_width/2.0f, gold_color, 

    -(shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color, 
    -shaft_width/2.0f, 0.445f, -shaft_width/2.0f, gold_color, 
    shaft_width/2.0f, 0.445f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color,  
    -(shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.445f, -shaft_width/2.0f, gold_color,  
    // //fin

    // End with whole bottom
    (shaft_width+0.009375f)/2.0f, 0.4375f, (shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4375f, (shaft_width+0.009375f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4375f, (shaft_width+0.009375f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4375f, (shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.435f, -shaft_width/2.0f, gold_color,

    -(shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color, 
    -shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color, 
    -(shaft_width+0.009375f)/2.0f, 0.4375f, (shaft_width+0.009375f)/2.0f, gold_color, 
    

    -(shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color,  
    -shaft_width/2.0f, 0.435f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color, 

    -(shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color, 
    shaft_width/2.0f, 0.435f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, 0.435f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color,  
    shaft_width/2.0f, 0.435f, -shaft_width/2.0f, gold_color, 
    -(shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color, 
    //fin

    -(shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4425f, (shaft_width+0.009375f)/2.0f, gold_color,

    -(shaft_width+0.009375f)/2.0f, 0.4375f, (shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4425f, (shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color,

    -(shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4375f, -(shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4425f, -(shaft_width+0.009375f)/2.0f, gold_color,

    // Top part longer section
    shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color,

    -shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.435f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.42f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.435f, -shaft_width/2.0f, gold_color,


    -shaft_width/2.0f, 0.435f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.42f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color,

    -shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.435f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.42f, -shaft_width/2.0f, gold_color,

    -shaft_width/2.0f, 0.435f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.435f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.42f, -shaft_width/2.0f, gold_color,

    shaft_width/2.0f, 0.42f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.42f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.435f, -shaft_width/2.0f, gold_color,

    // Start of 2nd above the red body

    (shaft_width+0.009375f)/2.0f, 0.4125f, (shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4175f, (shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4175f, (shaft_width+0.009375f)/2.0f, gold_color,

    -(shaft_width+0.009375f)/2.0f, 0.4175f, (shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4125f, (shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4125f, (shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4125f, (shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4175f, (shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4125f, (shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color,

    // // End with whole top
    (shaft_width+0.009375f)/2.0f, 0.4175f, (shaft_width+0.009375f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4175f, (shaft_width+0.009375f)/2.0f, gold_color,

    shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4175f, (shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4175f, (shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.42f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color,

    -(shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color, 
    -(shaft_width+0.009375f)/2.0f, 0.4175f, (shaft_width+0.009375f)/2.0f, gold_color, 
    -shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color, 
    

    -(shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color,  
    -shaft_width/2.0f, 0.42f, shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, 0.42f, -shaft_width/2.0f, gold_color, 

    -(shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color, 
    -shaft_width/2.0f, 0.42f, -shaft_width/2.0f, gold_color, 
    shaft_width/2.0f, 0.42f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color,  
    -(shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.42f, -shaft_width/2.0f, gold_color,  
    // //fin

    // End with whole bottom
    (shaft_width+0.009375f)/2.0f, 0.4125f, (shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4125f, (shaft_width+0.009375f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4125f, (shaft_width+0.009375f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4125f, (shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.41f, -shaft_width/2.0f, gold_color,

    -(shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color, 
    -shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color, 
    -(shaft_width+0.009375f)/2.0f, 0.4125f, (shaft_width+0.009375f)/2.0f, gold_color, 
    

    -(shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color,  
    -shaft_width/2.0f, 0.41f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color, 

    -(shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color, 
    shaft_width/2.0f, 0.41f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, 0.41f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color,  
    shaft_width/2.0f, 0.41f, -shaft_width/2.0f, gold_color, 
    -(shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color, 
    //fin

    -(shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4175f, (shaft_width+0.009375f)/2.0f, gold_color,

    -(shaft_width+0.009375f)/2.0f, 0.4125f, (shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4175f, (shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color,

    -(shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, 0.4125f, -(shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, 0.4175f, -(shaft_width+0.009375f)/2.0f, gold_color,

    // Start of top attached to red body

    (shaft_width+0.00625f)/2.0f, 0.4025f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, 0.4075f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, 0.4075f, (shaft_width+0.00625f)/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, 0.4075f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, 0.4025f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, 0.4025f, (shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, 0.4025f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, 0.4075f, (shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, 0.4025f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color,

    // // End with whole top
    (shaft_width+0.00625f)/2.0f, 0.4075f, (shaft_width+0.00625f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, 0.4075f, (shaft_width+0.00625f)/2.0f, gold_color,

    shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, 0.4075f, (shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, 0.4075f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, 0.41f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    -(shaft_width+0.00625f)/2.0f, 0.4075f, (shaft_width+0.00625f)/2.0f, gold_color, 
    -shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color, 
    

    -(shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color,  
    -shaft_width/2.0f, 0.41f, shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, 0.41f, -shaft_width/2.0f, gold_color, 

    -(shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    -shaft_width/2.0f, 0.41f, -shaft_width/2.0f, gold_color, 
    shaft_width/2.0f, 0.41f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color,  
    -(shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, 0.41f, -shaft_width/2.0f, gold_color,  
    // //fin

    // End with whole bottom
    (shaft_width+0.00625f)/2.0f, 0.4025f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, 0.4025f, (shaft_width+0.00625f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.4f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, 0.4f, shaft_width/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, 0.4025f, (shaft_width+0.00625f)/2.0f, gold_color,
    -shaft_width/2.0f, 0.4f, shaft_width/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, 0.4025f, (shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, 0.4f, shaft_width/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, 0.4f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, 0.4f, -shaft_width/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    -shaft_width/2.0f, 0.4f, shaft_width/2.0f, gold_color, 
    -(shaft_width+0.00625f)/2.0f, 0.4025f, (shaft_width+0.00625f)/2.0f, gold_color, 
    

    -(shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color,  
    -shaft_width/2.0f, 0.4f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, 0.4f, shaft_width/2.0f, gold_color, 

    -(shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    shaft_width/2.0f, 0.4f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, 0.4f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color,  
    shaft_width/2.0f, 0.4f, -shaft_width/2.0f, gold_color, 
    -(shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    //fin

    -(shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, 0.4075f, (shaft_width+0.00625f)/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, 0.4025f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, 0.4075f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, 0.4025f, -(shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, 0.4075f, -(shaft_width+0.00625f)/2.0f, gold_color,


    // Start of main red body

    shaft_width/2.0f, -0.8f, shaft_width/2.0f, red_color,
    shaft_width/2.0f, 0.4f, shaft_width/2.0f, red_color,
    -shaft_width/2.0f, 0.4f, shaft_width/2.0f, red_color,

    -shaft_width/2.0f, 0.4f, shaft_width/2.0f, red_color,
    -shaft_width/2.0f, -0.8f, shaft_width/2.0f, red_color,
    shaft_width/2.0f, -0.8f, shaft_width/2.0f, red_color,

    shaft_width/2.0f, -0.8f, shaft_width/2.0f, red_color,
    shaft_width/2.0f, 0.4f, -shaft_width/2.0f, red_color,
    shaft_width/2.0f, 0.4f, shaft_width/2.0f, red_color,

    shaft_width/2.0f, -0.8f, shaft_width/2.0f, red_color,
    shaft_width/2.0f, -0.8f, -shaft_width/2.0f, red_color,
    shaft_width/2.0f, 0.4f, -shaft_width/2.0f, red_color,

    // End of staff delete later
    shaft_width/2.0f, -0.8f, shaft_width/2.0f, red_color,
    -shaft_width/2.0f, -0.8f, shaft_width/2.0f, red_color,
    shaft_width/2.0f, -0.8f, -shaft_width/2.0f, red_color,

    // End of staff delete later
    shaft_width/2.0f, 0.4f, shaft_width/2.0f, red_color,
    shaft_width/2.0f, 0.4f, -shaft_width/2.0f, red_color,
    -shaft_width/2.0f, 0.4f, shaft_width/2.0f, red_color,

    // End of staff delete later
    -shaft_width/2.0f, -0.8f, -shaft_width/2.0f, red_color,
    shaft_width/2.0f, -0.8f, -shaft_width/2.0f, red_color,
    -shaft_width/2.0f, -0.8f, shaft_width/2.0f, red_color,

    // End of staff delete later
    -shaft_width/2.0f, 0.4f, -shaft_width/2.0f, red_color,
    -shaft_width/2.0f, 0.4f, shaft_width/2.0f, red_color,
    shaft_width/2.0f, 0.4f, -shaft_width/2.0f, red_color,

    -shaft_width/2.0f, 0.4f, -shaft_width/2.0f, red_color,
    -shaft_width/2.0f, -0.8f, -shaft_width/2.0f, red_color,
    -shaft_width/2.0f, 0.4f, shaft_width/2.0f, red_color,

    -shaft_width/2.0f, -0.8f, shaft_width/2.0f, red_color,
    -shaft_width/2.0f, 0.4f, shaft_width/2.0f, red_color,
    -shaft_width/2.0f, -0.8f, -shaft_width/2.0f, red_color,

    -shaft_width/2.0f, 0.4f, -shaft_width/2.0f, red_color,
    shaft_width/2.0f, 0.4f, -shaft_width/2.0f, red_color,
    -shaft_width/2.0f, -0.8f, -shaft_width/2.0f, red_color,

    shaft_width/2.0f, -0.8f, -shaft_width/2.0f, red_color,
    -shaft_width/2.0f, -0.8f, -shaft_width/2.0f, red_color,
    shaft_width/2.0f, 0.4f, -shaft_width/2.0f, red_color,

    // Start of Bottom Part

    (shaft_width+0.00625f)/2.0f, -0.8075f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8025f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8025f, (shaft_width+0.00625f)/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, -0.8025f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8075f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8075f, (shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8075f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8025f, (shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8075f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color,

    // // End with whole top
    (shaft_width+0.00625f)/2.0f, -0.8025f, (shaft_width+0.00625f)/2.0f, gold_color,
    -shaft_width/2.0f, -0.8f, shaft_width/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8025f, (shaft_width+0.00625f)/2.0f, gold_color,

    shaft_width/2.0f, -0.8f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.8f, shaft_width/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8025f, (shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8025f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, -0.8f, shaft_width/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, -0.8f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.8f, shaft_width/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    -(shaft_width+0.00625f)/2.0f, -0.8025f, (shaft_width+0.00625f)/2.0f, gold_color, 
    -shaft_width/2.0f, -0.8f, shaft_width/2.0f, gold_color, 
    

    -(shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color,  
    -shaft_width/2.0f, -0.8f, shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, -0.8f, -shaft_width/2.0f, gold_color, 

    -(shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    -shaft_width/2.0f, -0.8f, -shaft_width/2.0f, gold_color, 
    shaft_width/2.0f, -0.8f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color,  
    -(shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, -0.8f, -shaft_width/2.0f, gold_color,  
    // //fin

    // End with whole bottom
    (shaft_width+0.00625f)/2.0f, -0.8075f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8075f, (shaft_width+0.00625f)/2.0f, gold_color,
    -shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8075f, (shaft_width+0.00625f)/2.0f, gold_color,
    -shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8075f, (shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.81f, -shaft_width/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    -shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color, 
    -(shaft_width+0.00625f)/2.0f, -0.8075f, (shaft_width+0.00625f)/2.0f, gold_color, 
    

    -(shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color,  
    -shaft_width/2.0f, -0.81f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color, 

    -(shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    shaft_width/2.0f, -0.81f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, -0.81f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color,  
    shaft_width/2.0f, -0.81f, -shaft_width/2.0f, gold_color, 
    -(shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    //fin

    -(shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8025f, (shaft_width+0.00625f)/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, -0.8075f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8025f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8075f, -(shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8025f, -(shaft_width+0.00625f)/2.0f, gold_color,

    // Bottom part longer section
    shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color,

    -shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.81f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.83f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.81f, -shaft_width/2.0f, gold_color,


    -shaft_width/2.0f, -0.81f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.83f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color,

    -shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.81f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.83f, -shaft_width/2.0f, gold_color,

    -shaft_width/2.0f, -0.81f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.81f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.83f, -shaft_width/2.0f, gold_color,

    shaft_width/2.0f, -0.83f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.83f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.81f, -shaft_width/2.0f, gold_color,

    // Bottom part shorter section 2
    (shaft_width+0.00625f)/2.0f, -0.8375f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8325f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8325f, (shaft_width+0.00625f)/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, -0.8325f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8375f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8375f, (shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8375f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8325f, (shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8375f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color,

    // // End with whole top
    (shaft_width+0.00625f)/2.0f, -0.8325f, (shaft_width+0.00625f)/2.0f, gold_color,
    -shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8325f, (shaft_width+0.00625f)/2.0f, gold_color,

    shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8325f, (shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8325f, (shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, -0.83f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    -(shaft_width+0.00625f)/2.0f, -0.8325f, (shaft_width+0.00625f)/2.0f, gold_color, 
    -shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color, 
    

    -(shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color,  
    -shaft_width/2.0f, -0.83f, shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, -0.83f, -shaft_width/2.0f, gold_color, 

    -(shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    -shaft_width/2.0f, -0.83f, -shaft_width/2.0f, gold_color, 
    shaft_width/2.0f, -0.83f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color,  
    -(shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, -0.83f, -shaft_width/2.0f, gold_color,  
    // //fin

    // End with whole bottom
    (shaft_width+0.00625f)/2.0f, -0.8375f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8375f, (shaft_width+0.00625f)/2.0f, gold_color,
    -shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8375f, (shaft_width+0.00625f)/2.0f, gold_color,
    -shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8375f, (shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color,
    shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.84f, -shaft_width/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    -shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color, 
    -(shaft_width+0.00625f)/2.0f, -0.8375f, (shaft_width+0.00625f)/2.0f, gold_color, 
    

    -(shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color,  
    -shaft_width/2.0f, -0.84f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color, 

    -(shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    shaft_width/2.0f, -0.84f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, -0.84f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color,  
    shaft_width/2.0f, -0.84f, -shaft_width/2.0f, gold_color, 
    -(shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color, 
    //fin

    -(shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8325f, (shaft_width+0.00625f)/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, -0.8375f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8325f, (shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color,

    -(shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color,

    (shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color,
    -(shaft_width+0.00625f)/2.0f, -0.8375f, -(shaft_width+0.00625f)/2.0f, gold_color,
    (shaft_width+0.00625f)/2.0f, -0.8325f, -(shaft_width+0.00625f)/2.0f, gold_color,

    // // Bottom part thicc
    (shaft_width+0.009375f)/2.0f, -0.89f, (shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color,

    -shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, -0.89f, (shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, -0.89f, (shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, -0.89f, (shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, -0.84f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, -0.89f, (shaft_width+0.009375f)/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, -0.84f, -shaft_width/2.0f, gold_color,

    // // End of staff

    -shaft_width/2.0f, -0.84f, -shaft_width/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color,
    -shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color,

    -(shaft_width+0.009375f)/2.0f, -0.89f, (shaft_width+0.009375f)/2.0f, gold_color,
    -shaft_width/2.0f, -0.84f, shaft_width/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color,

    -shaft_width/2.0f, -0.84f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.84f, -shaft_width/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, -0.84f, -shaft_width/2.0f, gold_color,


    (shaft_width+0.009375f)/2.0f, -0.89f, (shaft_width+0.009375f)/2.0f, gold_color,
    -(shaft_width+0.009375f)/2.0f, -0.89f, (shaft_width+0.009375f)/2.0f, gold_color,
    -shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, -0.89f, (shaft_width+0.009375f)/2.0f, gold_color,
    -shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, -0.89f, (shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,
    (shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color,

    (shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color,
    shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color,

    -(shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color, 
    -shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color, 
    -(shaft_width+0.009375f)/2.0f, -0.89f, (shaft_width+0.009375f)/2.0f, gold_color, 
    

    -(shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color,  
    -shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color, 

    -(shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color, 
    shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color, 
    -shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color, 
    
    (shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color,  
    shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color, 
    -(shaft_width+0.009375f)/2.0f, -0.89f, -(shaft_width+0.009375f)/2.0f, gold_color,  

    // Bottom knub

    shaft_width/2.0f, -0.90f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,

    -shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.90f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.90f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, -0.90f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,

    shaft_width/2.0f, -0.90f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.90f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color,

    // End of staff delete later
    shaft_width/2.0f, -0.90f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.90f, shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.90f, -shaft_width/2.0f, gold_color,

    // // End of staff delete later
    // shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,
    // shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color,
    // -shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,

    // End of staff delete later
    -shaft_width/2.0f, -0.90f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.90f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.90f, shaft_width/2.0f, gold_color,

    // // End of staff delete later
    // -shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color,
    // -shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,
    // shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color,

    -shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.90f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,

    -shaft_width/2.0f, -0.90f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.89f, shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.90f, -shaft_width/2.0f, gold_color,

    -shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.90f, -shaft_width/2.0f, gold_color,

    shaft_width/2.0f, -0.90f, -shaft_width/2.0f, gold_color,
    -shaft_width/2.0f, -0.90f, -shaft_width/2.0f, gold_color,
    shaft_width/2.0f, -0.89f, -shaft_width/2.0f, gold_color,
};

std::vector<float> final_vertices;

float bounding_box[] = 
{
    1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
    -1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

    1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
    1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

    1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
    1.0f, 1.0f, -1.0f, 1.0f, 1.0f, 1.0f,

    -1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
    -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

    -1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
    -1.0f, 1.0f, -1.0f, 1.0f, 1.0f, 1.0f,

    1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
    -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

    1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 
    1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f,

    1.0f, 1.0f, -1.0f, 1.0f, 1.0f, 1.0f,
    1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f,

    1.0f, 1.0f, -1.0f, 1.0f, 1.0f, 1.0f,
    -1.0f, 1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 

    -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
    -1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f,

    -1.0f, 1.0f, -1.0f, 1.0f, 1.0f, 1.0f,
    -1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f,

    1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f,
    -1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f,
};


// define OpenGL object IDs to represent the vertex array and the shader program in the GPU
GLuint vao;         // vertex array object (stores the render state for our vertex array)
GLuint vbo;         // vertex buffer object (reserves GPU memory for our vertex array)
GLuint shader;      // combined vertex and fragment shader
GLuint bounding_box_vbo;
GLuint bounding_box_vao;

// called by the main function to do initial setup, such as uploading vertex
// arrays, shader programs, etc.; returns true if successful, false otherwise
bool setup()
{
    // generate the VAO and VBO objects and store their IDs in vao and vbo, respectively
    glGenVertexArrays(1, &vao);
    glGenBuffers(1, &vbo);
    glGenVertexArrays(1, &bounding_box_vao);
    glGenBuffers(1, &bounding_box_vbo);
    

    // bind the newly-created VAO to make it the current one that OpenGL will apply state changes to
    glBindVertexArray(vao);

    // upload our vertex array data to the newly-created VBO
    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBufferData(GL_ARRAY_BUFFER, final_vertices.size() * sizeof(float), final_vertices.data(), GL_STATIC_DRAW);

    // on the VAO, register the current VBO with the following vertex attribute layout:
    // - layout location 0...
    // - ... shall consist of 3 GL_FLOATs (corresponding to x, y, and z coordinates)
    // - ... its values will NOT be normalized (GL_FALSE)
    // - ... the stride length is the number of bytes of all 3 floats of each vertex (hence, 3 * sizeof(float))
    // - ... and we start at the beginning of the array (hence, (void*) 0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 9 * sizeof(float), (void*) 0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 9 * sizeof(float), (void*) (3 * sizeof(float)));
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 9 * sizeof(float), (void*) (6 * sizeof(float)));
    // enable the newly-created layout location 0;
    // this shall be used by our vertex shader to read the vertex's x, y, and z
    glEnableVertexAttribArray(0);
    glEnableVertexAttribArray(1);
    glEnableVertexAttribArray(2);

    glBindVertexArray(bounding_box_vao);

    glBindBuffer(GL_ARRAY_BUFFER, bounding_box_vbo);
    glBufferData(GL_ARRAY_BUFFER, sizeof(bounding_box), bounding_box, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*) 0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*) (3 * sizeof(float)));

    glEnableVertexAttribArray(0);
    glEnableVertexAttribArray(1);

    // important: if you have more vertex arrays to draw, make sure you separately define them
    // with unique VAO and VBO IDs, and follow the same process above to upload them to the GPU

    // loading textures
    woodTexture = gdevLoadTexture("wood_gray.jpg", GL_REPEAT, true, true);
    if (! woodTexture) return false;
    goldTexture = gdevLoadTexture("gold_gray.jpg", GL_REPEAT, true, true);
    if (! goldTexture) return false;
    

    // load our shader program
    shader = gdevLoadShader("exercise3.vs", "exercise3.fs");
    if (! shader)
        return false;

    return true;
}

glm::vec3 calculate_normal(glm::vec3 a, glm::vec3 b){
    return glm::normalize(cross(a, b));
}

// called by the main function to do rendering per frame
void render()
{
    // clear the whole frame
    // glClearColor(0.0f, 0.0f, 0.0f, 1.0f); // black
    // glClearColor(0.05f, 0.05f, 0.05f, 1.0f); // very dark gray
    glClearColor(0.02f, 0.02f, 0.08f, 1.0f); // dark blue
    // glClearColor(0.03f, 0.06f, 0.05f, 1.0f); // dark desaturated green
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // using our shader program...
    glUseProgram(shader);
    glEnable(GL_CULL_FACE);
    glEnable(GL_DEPTH_TEST); // enable OpenGL's hidden surface removal
    glm::mat4 matrix;
    glm::mat4 view = glm::mat4(1.0f);
    matrix = glm::perspective(glm::radians(fov),
                            (float) WINDOW_WIDTH / WINDOW_HEIGHT,
                            0.1f,
                            100.0f);


    glm::vec3 direction = cameraPos + cameraFront;
    view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);
    float t = glfwGetTime();
    float rot_speed = 50.0f;
    matrix = matrix * view;
    glm::mat4 model(1.0f);
    model = glm::translate(model, glm::vec3(0.0f, 0.0f, 0.0f));
    model = glm::rotate(model, glm::radians(t * rot_speed),
                                glm::normalize(glm::vec3(0.0f, 1.0f, 0.0f)));
    model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
    
    matrix = matrix * model;
    glUniformMatrix4fv(glGetUniformLocation(shader, "matrix"),
                        1, GL_FALSE, glm::value_ptr(matrix));
    

    glUniformMatrix4fv(glGetUniformLocation(shader, "model"),
    1, GL_FALSE, glm::value_ptr(model));

    glm::vec3 lightPos(0.0f, 0.65f, 0.0f);
    glUniform3f(glGetUniformLocation(shader, "lightPos"), lightPos.x, lightPos.y, lightPos.z);

    glm::vec3 lightPos1 = glm::vec3(model * glm::vec4(lightPos, 1.0f));
//  std::cout << "LIGHTPOS 1: " << lightPos1.x << " " << lightPos1.y << " " << lightPos1.z << std::endl;
    
    // set the active texture
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, woodTexture);
    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, goldTexture);

    // then connect each texture unit to a sampler2D in the fragment shader
    glUniform1i(glGetUniformLocation(shader,"woodTex"), 0);
    glUniform1i(glGetUniformLocation(shader,"goldTex"), 1);
    
    
    // ... draw our triangles
    glBindVertexArray(vao);
    glUniform1f(glGetUniformLocation(shader, "is_border"), 0.0f);
    glDrawArrays(GL_TRIANGLES, 0, (final_vertices.size() * sizeof(float)) / (9 * sizeof(float)));


    matrix = matrix * glm::inverse(model);
    model = glm::rotate(model, glm::radians(t * rot_speed * -1.0f), glm::normalize(glm::vec3(0.0f, 1.0f, 0.0f)));
    matrix = matrix * model;

    glUniformMatrix4fv(glGetUniformLocation(shader, "model"),
                        1, GL_FALSE, glm::value_ptr(model));
    glUniformMatrix4fv(glGetUniformLocation(shader, "matrix"),
                        1, GL_FALSE, glm::value_ptr(matrix));
    glUniform1f(glGetUniformLocation(shader, "is_border"), 1.0f);
    glBindVertexArray(bounding_box_vao);
    glDrawArrays(GL_LINES, 0, sizeof(bounding_box) / (6 * sizeof(float)));

    matrix = matrix * glm::inverse(model);
    model = glm::translate(model, glm::vec3(2.0f, 0.0f, 0.0f));
    model = glm::rotate(model, glm::radians(t * rot_speed), glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
    matrix = matrix * model;


    glm::vec3 lightPos2 = glm::vec3(model * glm::vec4(lightPos, 1.0f));
    // std::cout << "LIGHTPOS 2: " << lightPos2.x << " " << lightPos2.y << " " << lightPos2.z << std::endl;

    glUniformMatrix4fv(glGetUniformLocation(shader, "model"),
                        1, GL_FALSE, glm::value_ptr(model));
    glUniformMatrix4fv(glGetUniformLocation(shader, "matrix"),
                        1, GL_FALSE, glm::value_ptr(matrix));

    glBindVertexArray(vao);
    glUniform1f(glGetUniformLocation(shader, "is_border"), 0.0f);
    glDrawArrays(GL_TRIANGLES, 0, (final_vertices.size() * sizeof(float)) / (9 * sizeof(float)));

    
    matrix = matrix * glm::inverse(model);
    model = glm::rotate(model, glm::radians(t * rot_speed * -1.0f), glm::normalize(glm::vec3(1.0f, 0.0f, 0.0f)));
    matrix = matrix * model;

    glUniformMatrix4fv(glGetUniformLocation(shader, "model"),
                        1, GL_FALSE, glm::value_ptr(model));
    glUniformMatrix4fv(glGetUniformLocation(shader, "matrix"),
                        1, GL_FALSE, glm::value_ptr(matrix));
    glUniform1f(glGetUniformLocation(shader, "is_border"), 1.0f);
    glBindVertexArray(bounding_box_vao);
    glDrawArrays(GL_LINES, 0, sizeof(bounding_box) / (6 * sizeof(float)));

    matrix = matrix * glm::inverse(model);
    model = glm::translate(model, glm::vec3(-4.0f, 0.0f, 0.0f));

    model = glm::rotate(model, glm::radians(t * rot_speed), glm::normalize(glm::vec3(0.0f, 0.0f, 1.0f)));
    matrix = matrix * model;

    glm::vec3 lightPos3 = glm::vec3(model * glm::vec4(lightPos, 1.0f));
    // std::cout << "LIGHTPOS 3: " << lightPos3.x << " " << lightPos3.y << " " << lightPos3.z << std::endl;

    glUniformMatrix4fv(glGetUniformLocation(shader, "model"),
                        1, GL_FALSE, glm::value_ptr(model));
    glUniformMatrix4fv(glGetUniformLocation(shader, "matrix"),
                        1, GL_FALSE, glm::value_ptr(matrix));


    glBindVertexArray(vao);
    glUniform1f(glGetUniformLocation(shader, "is_border"), 0.0f);
    glDrawArrays(GL_TRIANGLES, 0, (final_vertices.size() * sizeof(float)) / (9 * sizeof(float)));

    matrix = matrix * glm::inverse(model);
    model = glm::rotate(model, glm::radians(t * rot_speed * -1.0f), glm::normalize(glm::vec3(0.0f, 0.0f, 1.0f)));
    matrix = matrix * model;

    glUniformMatrix4fv(glGetUniformLocation(shader, "model"),
                        1, GL_FALSE, glm::value_ptr(model));
    glUniformMatrix4fv(glGetUniformLocation(shader, "matrix"),
                        1, GL_FALSE, glm::value_ptr(matrix));
    glUniform1f(glGetUniformLocation(shader, "is_border"), 1.0f);
    glBindVertexArray(bounding_box_vao);
    glDrawArrays(GL_LINES, 0, sizeof(bounding_box) / (6 * sizeof(float)));

}


void processInput(GLFWwindow *pWindow, float deltaTime) {
    float cameraSpeed = 0.5f * deltaTime;

    if (glfwGetKey(pWindow, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS) {
        cameraSpeed *= 2.0f;
    }

    if (glfwGetKey(pWindow, GLFW_KEY_W) == GLFW_PRESS) {
        cameraPos += cameraFront * cameraSpeed;
    } 
    
    if (glfwGetKey(pWindow, GLFW_KEY_S) == GLFW_PRESS) {
        cameraPos += -cameraFront * cameraSpeed;
    } 

    if (glfwGetKey(pWindow, GLFW_KEY_D) == GLFW_PRESS) {
        cameraPos += glm::cross(cameraFront, cameraUp) * cameraSpeed;
    }

    if (glfwGetKey(pWindow, GLFW_KEY_A) == GLFW_PRESS) {
        cameraPos += -glm::cross(cameraFront, cameraUp) * cameraSpeed;
    }
}

/*****************************************************************************/

// handler called by GLFW when there is a keyboard event
void handleKeys(GLFWwindow* pWindow, int key, int scancode, int action, int mode)
{
    // pressing Esc closes the window
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(pWindow, GL_TRUE);
}

// handler called by GLFW when the window is resized
void handleResize(GLFWwindow* pWindow, int width, int height)
{
    // tell OpenGL to do its drawing within the entire "client area" (area within the borders) of the window
    glViewport(0, 0, width, height);
}

void mouse_callback(GLFWwindow* pWindow, double xpos, double ypos) {
    if (firstMouse)
    {
        lastX = xpos;
        lastY = ypos;
        firstMouse = false;
    }

    float xoffset = xpos-lastX;
    float yoffset = lastY - ypos; // reverse cause y is reversed in window space;

    lastX = xpos;
    lastY = ypos;

    const float sensitivity = 0.1f;

    xoffset *= sensitivity;
    yoffset *= sensitivity;

    yaw += xoffset;
    pitch += yoffset;

    if (pitch > 89.0f) {
        pitch = 89.0f;
    }
    if (pitch < -89.0f) {
        pitch = -89.0f;
    }

    glm::vec3 cam_dir;
    cam_dir.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
    cam_dir.y = sin(glm::radians(pitch));
    cam_dir.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
    cameraFront = glm::normalize(cam_dir);
    
}

void scroll_callback(GLFWwindow *pWindow, double xoffset, double yoffset) {
    fov -= (float)yoffset;
    if (fov < 1.0f) {
        fov = 1.0f;
    }
    if (fov > 90.0f) {
        fov = 90.0f;
    }

}

// main function
int main(int argc, char** argv)
{

    glm::vec2 start_bot(0.075f, 0.362132f);
    glm::vec2 start_top(0.0506171f, 0.0506171f);
    glm::vec2 small(-small_side, 0.0f);
    glm::vec2 edge(-edge_side, 0.0f);
    glm::vec2 width(-top_width, 0.0f);


    for (int i = 0; i < (sizeof(vertices)/sizeof(float)/6.0f/3.0f); i++) {
        int cur = i*6*3;

        

        glm::vec3 a = glm::vec3(vertices[cur+6]-vertices[cur+0], vertices[cur+7]-vertices[cur+1],vertices[cur+8]-vertices[cur+2]);
        glm::vec3 b = glm::vec3(vertices[cur+12]-vertices[cur+0], vertices[cur+13]-vertices[cur+1],vertices[cur+14]-vertices[cur+2]);

        glm::vec3 normal = calculate_normal(a, b);

        std::vector<float> cur_triangle = {
            vertices[cur+0], vertices[cur+1], vertices[cur+2], vertices[cur+3], vertices[cur+4], vertices[cur+5], normal.x, normal.y, normal.z, 
            vertices[cur+6], vertices[cur+7], vertices[cur+8], vertices[cur+9], vertices[cur+10], vertices[cur+11], normal.x, normal.y, normal.z,
            vertices[cur+12], vertices[cur+13], vertices[cur+14], vertices[cur+15], vertices[cur+16], vertices[cur+17], normal.x, normal.y, normal.z,
        };

        final_vertices.insert(final_vertices.end(), cur_triangle.begin(), cur_triangle.end());

    }


    // initialize GLFW and ask for OpenGL 3.3 core
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

    // create a GLFW window with the specified width, height, and title
    pWindow = glfwCreateWindow(WINDOW_WIDTH, WINDOW_HEIGHT, WINDOW_TITLE, NULL, NULL);


    if (! pWindow)
    {
        // gracefully terminate if we cannot create the window
        std::cout << "Cannot create the GLFW window.\n";
        glfwTerminate();
        return -1;
    }

    // make the window the current context of subsequent OpenGL commands,
    // and enable vertical sync and aspect-ratio correction on the GLFW window
    glfwMakeContextCurrent(pWindow);
    glfwSwapInterval(1);
    glfwSetWindowAspectRatio(pWindow, WINDOW_WIDTH, WINDOW_HEIGHT);

    // set up callback functions to handle window system events
    glfwSetKeyCallback(pWindow, handleKeys);
    glfwSetFramebufferSizeCallback(pWindow, handleResize);

    // don't miss any momentary keypresses
    glfwSetInputMode(pWindow, GLFW_STICKY_KEYS, GLFW_TRUE);

    glfwSetInputMode(pWindow, GLFW_CURSOR, GLFW_CURSOR_DISABLED);  
    glfwSetCursorPosCallback(pWindow, mouse_callback);

    glfwSetScrollCallback(pWindow, scroll_callback);

    // initialize GLAD, which acts as a library loader for the current OS's native OpenGL library
    gladLoadGLLoader((GLADloadproc) glfwGetProcAddress);
    float delta;
    float last_frame = 0.0f;
    
    // if our initial setup is successful...
    if (setup())
    {
        // do rendering in a loop until the user closes the window
        while (! glfwWindowShouldClose(pWindow))
        {
            // render our next frame
            // (by default, GLFW uses double-buffering with a front and back buffer;
            // all drawing goes to the back buffer, so the frame does not get shown yet)
            float current_frame = glfwGetTime();
            delta = current_frame - last_frame;
            last_frame = current_frame;

            processInput(pWindow, delta);
            render();


            // swap the GLFW front and back buffers to show the next frame
            glfwSwapBuffers(pWindow);

            // process any window events (such as moving, resizing, keyboard presses, etc.)
            glfwPollEvents();
        }
    }

    // gracefully terminate the program
    glfwTerminate();
    return 0;
}
